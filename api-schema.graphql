# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AdminCreateIdentityInput {
  ownerId: String!
  provider: IdentityProvider!
  providerId: String!
}

input AdminCreateUserInput {
  password: String
  username: String!
}

input AdminFindManyCommentInput {
  reviewId: String!
  search: String
}

input AdminFindManyCommunityInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input AdminFindManyIdentityInput {
  ownerId: String
  provider: IdentityProvider
}

input AdminFindManyProjectInput {
  communityId: String
  limit: Int = 10
  page: Int = 1
  search: String
}

input AdminFindManyRatingInput {
  commentId: String
  search: String
}

input AdminFindManyReviewInput {
  limit: Int = 10
  page: Int = 1
  projectId: String!
  search: String
}

input AdminFindManyUserInput {
  limit: Int = 10
  page: Int = 1
  role: UserRole
  search: String
  status: UserStatus
}

input AdminUpdateCommentInput {
  content: String
}

input AdminUpdateCommunityInput {
  avatarUrl: String
  homeServerId: String
  name: String
}

input AdminUpdateDiscordServerInput {
  communityCategoryId: String
  createChannels: Boolean
  logChannelId: String
  projectCategoryId: String
}

input AdminUpdateProjectInput {
  amountManagerUsd: Int
  amountReferralUsd: Int
  amountTotalUsd: Int
  avatarUrl: String
  communityId: String
  duration: Int
  instructions: String
  linkDiscord: String
  linkGithub: String
  linkTelegram: String
  linkTwitter: String
  linkWebsite: String
  name: String
  reviewsOpen: Boolean
  startDate: DateTime
  status: ProjectStatus
  tags: [String!]
}

input AdminUpdateRatingInput {
  content: String
  rating: Float!
}

input AdminUpdateUserInput {
  avatarUrl: String
  developer: Boolean
  name: String
  role: UserRole
  status: UserStatus
  username: String
}

type AppConfig {
  authDiscordEnabled: Boolean!
  authPasswordEnabled: Boolean!
  authRegisterEnabled: Boolean!
  authSolanaEnabled: Boolean!
  solanaMainnetUrl: String!
}

type Comment {
  author: User
  authorId: String!
  category: CommentCategory!
  children: [Comment!]
  content: String!
  createdAt: DateTime
  id: String!
  parentId: String
  ratingAverage: Float
  ratings: [Rating!]
  review: Review
  reviewId: String!
  updatedAt: DateTime
  versionBrowser: String
  versionOs: String
}

enum CommentCategory {
  Bug
  Feature
  Other
}

type Community {
  activeProjectsCount: Int
  avatarUrl: String
  createdAt: DateTime
  homeServerId: String
  id: String!
  manageUrl: String!
  managerCount: Int
  managers: [CommunityManager!]
  name: String!
  updatedAt: DateTime
  viewUrl: String!
}

type CommunityManager {
  admin: Boolean
  createdAt: DateTime
  id: String!
  updatedAt: DateTime
  user: User
  userId: String!
}

type CommunityPaging {
  data: [Community!]!
  meta: PagingMeta!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DiscordBot {
  avatarUrl: String
  id: String!
  inviteUrl: String
  manageUrl: String
  username: String!
}

type DiscordChannel {
  guildId: String
  id: String!
  name: String!
  parentId: String
  type: String!
}

type DiscordRole {
  color: Int!
  id: String!
  managed: Boolean!
  name: String!
  position: Int!
}

type DiscordServer {
  avatarUrl: String
  communityCategoryId: String
  createChannels: Boolean
  id: String!
  logChannelId: String
  name: String!
  permissions: [String!]
  projectCategoryId: String
}

type Identity {
  challenges: [IdentityChallenge!]
  createdAt: DateTime!
  expired: Boolean
  id: String!
  name: String
  owner: User
  primary: Boolean
  profile: JSON
  provider: IdentityProvider!
  providerId: String!
  updatedAt: DateTime!
  url: String
  verified: Boolean
}

type IdentityChallenge {
  challenge: String!
  createdAt: DateTime!
  id: String!
  ip: String!
  provider: IdentityProvider!
  providerId: String!
  signature: String
  updatedAt: DateTime!
  userAgent: String!
  verified: Boolean!
}

enum IdentityProvider {
  Discord
  Solana
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LinkIdentityInput {
  provider: IdentityProvider!
  providerId: String!
}

input LoginInput {
  password: String!
  username: String!
}

input ManagerCreateCommunityInput {
  name: String!
}

input ManagerCreateProjectInput {
  communityId: String!
  duration: Int
  name: String!
  startDate: DateTime
}

input ManagerCreateRatingInput {
  commentId: String!
  content: String
  rating: Float!
}

input ManagerFindManyCommentInput {
  projectId: String!
  search: String
}

input ManagerFindManyCommunityInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input ManagerFindManyProjectInput {
  communityId: String
  limit: Int = 10
  page: Int = 1
  search: String
}

input ManagerFindManyRatingInput {
  search: String
}

input ManagerFindManyReviewByProjectInput {
  projectId: String!
  search: String
}

input ManagerUpdateCommunityInput {
  avatarUrl: String
  homeServerId: String
  name: String
}

input ManagerUpdateProjectInput {
  amountManagerUsd: Int
  amountReferralUsd: Int
  amountTotalUsd: Int
  avatarUrl: String
  duration: Int
  instructions: String
  linkDiscord: String
  linkGithub: String
  linkTelegram: String
  linkTwitter: String
  linkWebsite: String
  name: String
  referralId: String
  reviewsOpen: Boolean
  startDate: DateTime
  status: ProjectStatus
  tags: [String!]
}

input ManagerUpdateRatingInput {
  content: String
  rating: Float
}

type Mutation {
  adminAddCommunityManager(communityId: String!, userId: String!): Boolean
  adminAddProjectManager(managerUserId: String!, projectId: String!): Boolean
  adminAddProjectReferral(projectId: String!, referralUserId: String!): Boolean
  adminAddProjectReviewer(projectId: String!, reviewerUserId: String!): Boolean
  adminCreateCommunityChannel(channelId: String!, communityId: String!, serverId: String!): Boolean!
  adminCreateIdentity(input: AdminCreateIdentityInput!): Identity
  adminCreateProjectChannel(channelId: String!, projectId: String!, serverId: String!): Boolean!
  adminCreateUser(input: AdminCreateUserInput!): User
  adminDeleteComment(commentId: String!): Boolean
  adminDeleteCommunity(communityId: String!): Boolean
  adminDeleteCommunityChannel(channelId: String!, communityId: String!): Boolean!
  adminDeleteIdentity(identityId: String!): Boolean
  adminDeleteProject(projectId: String!): Boolean
  adminDeleteProjectChannel(channelId: String!, projectId: String!): Boolean!
  adminDeleteRating(ratingId: String!): Boolean
  adminDeleteReview(reviewId: String!): Boolean
  adminDeleteUser(userId: String!): Boolean
  adminLeaveDiscordServer(serverId: String!): Boolean!
  adminPingDiscordChannel(channelId: String!, serverId: String!): Boolean!
  adminRemoveCommunityManager(communityId: String!, userId: String!): Boolean
  adminRemoveProjectManager(managerUserId: String!, projectId: String!): Boolean
  adminRemoveProjectReferral(projectId: String!, referralUserId: String!): Boolean
  adminRemoveProjectReviewer(projectId: String!, reviewerUserId: String!): Boolean
  adminToggleCommunityAdmin(communityId: String!, userId: String!): Boolean
  adminUpdateComment(commentId: String!, input: AdminUpdateCommentInput!): Comment
  adminUpdateCommunity(communityId: String!, input: AdminUpdateCommunityInput!): Community
  adminUpdateDiscordServer(input: AdminUpdateDiscordServerInput!, serverId: String!): Boolean!
  adminUpdateProject(input: AdminUpdateProjectInput!, projectId: String!): Project
  adminUpdateRating(input: AdminUpdateRatingInput!, ratingId: String!): Rating
  adminUpdateUser(input: AdminUpdateUserInput!, userId: String!): User
  anonVerifyIdentityChallenge(input: VerifyIdentityChallengeInput!): IdentityChallenge
  login(input: LoginInput!): User
  logout: Boolean
  managerAddCommunityManager(communityId: String!, userId: String!): Boolean
  managerAddProjectManager(managerUserId: String!, projectId: String!): Boolean
  managerAddProjectReferral(projectId: String!, referralUserId: String!): Boolean
  managerAddProjectReviewer(projectId: String!, reviewerUserId: String!): Boolean
  managerCreateCommunity(input: ManagerCreateCommunityInput!): Community
  managerCreateProject(input: ManagerCreateProjectInput!): Project
  managerCreateRating(input: ManagerCreateRatingInput!): Rating
  managerDeleteCommunity(communityId: String!): Boolean
  managerDeleteProject(projectId: String!): Boolean
  managerDeleteRating(ratingId: String!): Boolean
  managerRemoveCommunityManager(communityId: String!, userId: String!): Boolean
  managerRemoveProjectManager(managerUserId: String!, projectId: String!): Boolean
  managerRemoveProjectReferral(projectId: String!, referralUserId: String!): Boolean
  managerRemoveProjectReviewer(projectId: String!, reviewerUserId: String!): Boolean
  managerToggleCommunityAdmin(communityId: String!, userId: String!): Boolean
  managerUpdateCommunity(communityId: String!, input: ManagerUpdateCommunityInput!): Community
  managerUpdateProject(input: ManagerUpdateProjectInput!, projectId: String!): Project
  managerUpdateRating(input: ManagerUpdateRatingInput!, ratingId: String!): Rating
  register(input: RegisterInput!): User
  reviewerCreateComment(input: ReviewerCreateCommentInput!): Comment
  reviewerCreateReview(projectId: String!): Review
  reviewerDeleteComment(commentId: String!): Boolean
  reviewerDeleteReview(reviewId: String!): Boolean
  reviewerUpdateComment(commentId: String!, input: ReviewerUpdateCommentInput!): Comment
  userDeleteIdentity(identityId: String!): Boolean
  userLinkIdentity(input: LinkIdentityInput!): Identity
  userSetPrimaryIdentity(identityId: String!): Identity
  userUpdateUser(input: UserUpdateUserInput!): User
  userVerifyIdentityChallenge(input: VerifyIdentityChallengeInput!): IdentityChallenge
}

type PagingMeta {
  currentPage: Int!
  isFirstPage: Boolean!
  isLastPage: Boolean!
  nextPage: Int
  pageCount: Int
  previousPage: Int
  totalCount: Int
}

type Project {
  amountManagerUsd: Int
  amountReferralUsd: Int
  amountTotalUsd: Int
  avatarUrl: String
  community: Community
  communityId: String!
  createdAt: DateTime
  duration: Int
  endDate: DateTime
  id: String!
  instructions: String
  linkDiscord: String
  linkGithub: String
  linkTelegram: String
  linkTwitter: String
  linkWebsite: String
  manageUrl: String!
  managers: [User!]
  name: String!
  referral: User
  reviewCount: Int
  reviewers: [User!]
  reviewsOpen: Boolean
  slug: String!
  startDate: DateTime
  status: ProjectStatus
  tags: [String!]
  updatedAt: DateTime
  viewUrl: String!
}

type ProjectPaging {
  data: [Project!]!
  meta: PagingMeta!
}

enum ProjectStatus {
  Active
  Draft
  Inactive
}

type Query {
  adminFindManyComment(input: AdminFindManyCommentInput!): [Comment!]
  adminFindManyCommunity(input: AdminFindManyCommunityInput!): CommunityPaging!
  adminFindManyIdentity(input: AdminFindManyIdentityInput!): [Identity!]
  adminFindManyProject(input: AdminFindManyProjectInput!): ProjectPaging!
  adminFindManyRating(input: AdminFindManyRatingInput!): [Rating!]!
  adminFindManyReview(input: AdminFindManyReviewInput!): ReviewPaging!
  adminFindManyUser(input: AdminFindManyUserInput!): UserPaging!
  adminFindOneCommunity(communityId: String!): Community
  adminFindOneProject(projectId: String!): Project
  adminFindOneReview(reviewId: String!): Review
  adminFindOneUser(userId: String!): User
  adminGetCommunityChannels(communityId: String!): [DiscordChannel!]!
  adminGetCommunityManagers(communityId: String!): [CommunityManager!]
  adminGetDiscordBot: DiscordBot!
  adminGetDiscordChannels(serverId: String!): [DiscordChannel!]!
  adminGetDiscordRoles(serverId: String!): [DiscordRole!]!
  adminGetDiscordServers: [DiscordServer!]!
  adminGetProjectChannels(projectId: String!): [DiscordChannel!]!
  anonRequestIdentityChallenge(input: RequestIdentityChallengeInput!): IdentityChallenge
  appConfig: AppConfig!
  managerFindManyComment(input: ManagerFindManyCommentInput!): [Comment!]
  managerFindManyCommunity(input: ManagerFindManyCommunityInput!): CommunityPaging!
  managerFindManyProject(input: ManagerFindManyProjectInput!): ProjectPaging!
  managerFindManyRating(input: ManagerFindManyRatingInput!): [Rating!]!
  managerFindManyReviewByProject(input: ManagerFindManyReviewByProjectInput!): [Review!]
  managerFindOneCommunity(communityId: String!): Community
  managerFindOneProject(projectId: String!): Project
  managerGetCommunityManager(communityId: String!): CommunityManager
  managerGetCommunityManagers(communityId: String!): [CommunityManager!]
  me: User
  reviewerFindManyComment(input: ReviewerFindManyCommentInput!): [Comment!]
  reviewerFindManyProject(input: ReviewerFindManyProjectInput!): ProjectPaging!
  reviewerFindManyReviewByProject(input: ReviewerFindManyReviewByProjectInput!): [Review!]
  reviewerFindManyReviewByUsername(input: ReviewerFindManyReviewByUsernameInput!): [Review!]
  reviewerFindOneProject(projectId: String!): Project
  reviewerFindOneReview(reviewId: String!): Review
  reviewerFindUserProjectReview(projectId: String!): Review
  uptime: Float!
  userFindManyCommunity(input: UserFindManyCommunityInput!): CommunityPaging!
  userFindManyIdentity(input: UserFindManyIdentityInput!): [Identity!]
  userFindManyUser(input: UserFindManyUserInput!): UserPaging!
  userFindOneCommunity(communityId: String!): Community
  userFindOneUser(username: String!): User
  userGetCommunityChannels(communityId: String!): [DiscordChannel!]!
  userGetDiscordServers: [DiscordServer!]!
  userGetProjectChannels(projectId: String!): [DiscordChannel!]!
  userRequestIdentityChallenge(input: RequestIdentityChallengeInput!): IdentityChallenge
}

type Rating {
  author: User
  authorId: String!
  commentId: String!
  content: String
  createdAt: DateTime
  id: String!
  rating: Float!
  updatedAt: DateTime
}

input RegisterInput {
  password: String!
  username: String!
}

input RequestIdentityChallengeInput {
  provider: IdentityProvider!
  providerId: String!
}

type Review {
  createdAt: DateTime
  id: String!
  name: String!
  project: Project
  projectId: String!
  ratingAverage: Float
  ratingProgress: Float
  reviewer: User
  reviewerId: String!
  updatedAt: DateTime
  viewUrl: String!
}

type ReviewPaging {
  data: [Review!]!
  meta: PagingMeta!
}

input ReviewerCreateCommentInput {
  content: String!
  parentId: String
  reviewId: String!
}

input ReviewerFindManyCommentInput {
  reviewId: String!
  search: String
}

input ReviewerFindManyProjectInput {
  communityId: String
  limit: Int = 10
  page: Int = 1
  search: String
  status: ProjectStatus
}

input ReviewerFindManyReviewByProjectInput {
  projectId: String!
  search: String
}

input ReviewerFindManyReviewByUsernameInput {
  search: String
  username: String!
}

input ReviewerUpdateCommentInput {
  content: String
}

type User {
  avatarUrl: String
  createdAt: DateTime
  developer: Boolean
  id: String!
  identities: [Identity!]
  manager: Boolean
  name: String
  profileUrl: String!
  role: UserRole
  status: UserStatus
  twitter: String
  updatedAt: DateTime
  username: String
  walletAddress: String
}

input UserFindManyCommunityInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input UserFindManyIdentityInput {
  username: String!
}

input UserFindManyUserInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

type UserPaging {
  data: [User!]!
  meta: PagingMeta!
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Created
  Inactive
}

input UserUpdateUserInput {
  avatarUrl: String
  developer: Boolean
  name: String
  twitter: String
}

input VerifyIdentityChallengeInput {
  challenge: String!
  provider: IdentityProvider!
  providerId: String!
  signature: String!
  useLedger: Boolean = false
}
