generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  content        String
  category       CommentCategory @default(Other)
  versionBrowser String?
  versionOs      String?
  review         Review          @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId       String
  author         User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String
  children       Comment[]       @relation(name: "CommentToComment")
  parent         Comment?        @relation(name: "CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  parentId       String?
  ratings        Rating[]
}

model Community {
  id           String             @id @default(cuid())
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  name         String
  avatarUrl    String?
  homeServerId String?
  channels     DiscordChannel[]
  managers     CommunityManager[]
  projects     Project[]
}

model CommunityManager {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  admin       Boolean   @default(false)
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@unique([communityId, userId])
}

model DiscordBot {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DiscordChannel {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  server      DiscordServer @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId    String
  projects    Project[]
  communities Community[]
}

model DiscordRole {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  server    DiscordServer? @relation(fields: [serverId], references: [id])
  serverId  String?
}

model DiscordServer {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  roles     DiscordRole[]
  channels  DiscordChannel[]

  createChannels      Boolean @default(false)
  logChannelId        String?
  projectCategoryId   String?
  communityCategoryId String?
}

model Identity {
  id           String              @id @default(cuid())
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  provider     IdentityProvider
  providerId   String
  name         String?
  accessToken  String?
  refreshToken String?
  profile      Json?
  primary      Boolean             @default(false)
  verified     Boolean             @default(false)
  owner        User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  challenges   IdentityChallenge[]

  @@unique([provider, providerId])
}

model IdentityChallenge {
  id         String           @id @default(cuid())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  challenge  String           @unique
  signature  String?
  ip         String
  userAgent  String
  verified   Boolean          @default(false)
  identity   Identity         @relation(fields: [provider, providerId], references: [provider, providerId], onDelete: Cascade)
  provider   IdentityProvider
  providerId String
}

model Project {
  id                String           @id @default(cuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  community         Community        @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId       String
  slug              String
  name              String
  instructions      String?
  linkDiscord       String?
  linkGithub        String?
  linkTelegram      String?
  linkTwitter       String?
  linkWebsite       String?
  durationDays      Int              @default(7)
  amountManagerUsd  Int?
  amountReferralUsd Int?
  amountTotalUsd    Int              @default(0)
  reviewsOpen       Boolean          @default(true)
  endDate           DateTime?
  startDate         DateTime?
  avatarUrl         String?
  status            ProjectStatus    @default(Draft)
  tags              String[]
  channels          DiscordChannel[]
  reviews           Review[]
  managers          User[]           @relation(name: "ProjectManagers")
  reviewers         User[]           @relation(name: "ProjectReviews")
  referral          User?            @relation(name: "ProjectReferral", fields: [referralId], references: [id])
  referralId        String?

  @@unique([communityId, name])
  @@unique([communityId, slug])
}

model Review {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  reviewer   User      @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewerId String
  comments   Comment[]

  @@unique([projectId, reviewerId])
}

model Rating {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  content   String?
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String

  @@unique([commentId, authorId])
}

model User {
  id              String             @id @default(cuid())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  avatarUrl       String?
  developer       Boolean            @default(false)
  name            String?
  password        String?
  walletAddress   String?
  role            UserRole           @default(User)
  status          UserStatus         @default(Created)
  username        String             @unique
  identities      Identity[]
  communities     CommunityManager[]
  reviews         Review[]
  projectManagers Project[]          @relation(name: "ProjectManagers")
  projectReviewes Project[]          @relation(name: "ProjectReviews")
  projectReferral Project[]          @relation(name: "ProjectReferral")
  comments        Comment[]
  ratings         Rating[]
}

enum CommentCategory {
  Bug
  Feature
  Other
}

enum IdentityProvider {
  Discord
  Solana
}

enum ProjectStatus {
  Active
  Draft
  Inactive
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Created
  Inactive
}
